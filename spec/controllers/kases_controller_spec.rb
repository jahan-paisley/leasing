require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe KasesController do

  before (:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Kase. As you add validations to Kase, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {"idno" => "1",
     "customer_id" => "1",
     "receipt_date" => "1391/09/04",
     "start_date" => "1391/09/23",
     "finish_date" => "1391/09/30",
     "status" => "",
     "contract_attributes" =>
         {"idno" => "",
          "correspondent_id" => "1",
          "category" => "",
          "due_date" => "",
          "total_amount" => "",
          "sign_date" => "",
          "property_attributes" =>
              {"idno" => "123", "category" => "Pride", "description" => ""},
          "guarantees_attributes" =>
              {"0" => {"amount" => "222", "description" => "", "_destroy" => ""}},
          "guarantors_attributes" =>
              {"0" => {"category" => "GuranteeType", "person_id" => "1", "_destroy" => ""}}
         },
     "installments_attributes" =>
         {"0" =>
              {"amount" => "123456",
               "due_date" => "1391/09/22",
               "paid" => "0",
               "_destroy" => ""}},
     "payments_attributes" =>
         {"0" =>
              {"amount" => "12",
               "payment_date" => "1390/01/01",
               "origin_account" => "",
               "origin_bank" => "",
               "benef_account" => "",
               "payment_method" => "",
               "idno" => "",
               "_destroy" => ""}}}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # KasesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all kases as @kases" do
      kase = Kase.create! valid_attributes
      get :index, {}
      assigns(:kases).should eq([kase])
    end
  end

  describe "GET show" do
    it "assigns the requested kase as @kase" do
      kase = Kase.create! valid_attributes
      get :show, {:id => kase.to_param}
      assigns(:kase).should eq(kase)
    end
  end

  describe "GET new" do
    it "assigns a new kase as @kase" do
      get :new, {}
      assigns(:kase).should be_a_new(Kase)
    end
  end

  describe "GET edit" do
    it "assigns the requested kase as @kase" do
      kase = Kase.create! valid_attributes
      get :edit, {:id => kase.to_param}
      assigns(:kase).should eq(kase)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Kase" do
        expect {
          post :create, {:kase => valid_attributes}
        }.to change(Kase, :count).by(1)
      end

      it "assigns a newly created kase as @kase" do
        post :create, {:kase => valid_attributes}
        assigns(:kase).should be_a(Kase)
        assigns(:kase).should be_persisted
      end

      it "redirects to the created kase" do
        post :create, {:kase => valid_attributes}
        response.should redirect_to(Kase.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved kase as @kase" do
        # Trigger the behavior that occurs when invalid params are submitted
        Kase.any_instance.stub(:save).and_return(false)
        post :create, {:kase => {}}
        assigns(:kase).should be_a_new(Kase)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Kase.any_instance.stub(:save).and_return(false)
        post :create, {:kase => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested kase" do
        kase = Kase.create! valid_attributes
        # Assuming there are no other kases in the database, this
        # specifies that the Kase created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Kase.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => kase.to_param, :kase => {'these' => 'params'}}
      end

      it "assigns the requested kase as @kase" do
        kase = Kase.create! valid_attributes
        put :update, {:id => kase.to_param, :kase => valid_attributes}
        assigns(:kase).should eq(kase)
      end

      it "redirects to the kase" do
        kase = Kase.create! valid_attributes
        put :update, {:id => kase.to_param, :kase => valid_attributes}
        response.should redirect_to(kase)
      end
    end

    describe "with invalid params" do
      it "assigns the kase as @kase" do
        kase = Kase.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Kase.any_instance.stub(:save).and_return(false)
        put :update, {:id => kase.to_param, :kase => {}}
        assigns(:kase).should eq(kase)
      end

      it "re-renders the 'edit' template" do
        kase = Kase.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Kase.any_instance.stub(:save).and_return(false)
        put :update, {:id => kase.to_param, :kase => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested kase" do
      kase = Kase.create! valid_attributes
      expect {
        delete :destroy, {:id => kase.to_param}
      }.to change(Kase, :count).by(-1)
    end

    it "redirects to the kases list" do
      kase = Kase.create! valid_attributes
      delete :destroy, {:id => kase.to_param}
      response.should redirect_to(kases_url)
    end
  end

end
